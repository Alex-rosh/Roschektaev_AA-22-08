#include "HPipe.h"
#include "Proverka.h"
#include <iostream>
#include <string>

using namespace std;

int Pipeline::newPipeID = 0;

std::ostream& operator << (std::ostream& out, const Pipeline& P)
{
	if (P.Name.empty())
	{
		cout << "Нет доступных труб для взаимодействия" << endl;
	}
	else
	{
		cout << "Название трубы: " << P.Name << "\n" << "Длина трубы: " << P.Length <<
			"\n" << "Диаметр трубы: " << P.Diameter << "\n" << "Состояние трубы: " << P.Repairing << "\n";
	}
	return out;
}

Pipeline::Pipeline()
{
	id = newPipeID++;
}

int Pipeline::getPipeID() const
{
	return id;
}

void Pipeline::readPipe(ifstream& in)
{
	getline(in >> ws, Name);
	in >> Length;
	in >> Diameter;
	in >> Repairing;
}

Pipeline Pipeline::AddNewPipe()
{
	Pipeline P;
	cout << "Добавление новой трубы\n" << "Введите название трубы:\n";
	P.Name = readLine();
	cout << "Введите длину трубы:\n";
	getCorrect(P.Length);
	cout << "Введите диаметр трубы:\n";
	getCorrect(P.Diameter);
	cout << "Выберите состояние трубы, где 0 - труба работает, 1 - труба находится в состоянии ремонта.\n";
	P.Repairing = getInRange(0, 1);
	cout << "Проверьте корректность введённых данных:\n";
	cout << P;
	return P;
}

void Pipeline::EditPipe()
{
	if (Name.empty())
	{
		cout << "Нет доступных труб для взаимодействия" << endl;
	}
	else
	{
		cout << "Выберите состояние трубы, где 0 - труба работает, 1 - труба находится в состоянии ремонта." << "\n";
		Repairing = getInRange(0, 1);
		cout << "Труба успешно отредактирована";
	}
}

void Pipeline::sohraneniePipe(ofstream& f, Pipeline& item)
{
	f << "Pipeline_flag" << "\n"
		<< item.Name << "\n"
		<< item.Length << "\n"
		<< item.Diameter << "\n"
		<< item.Repairing << "\n";
}